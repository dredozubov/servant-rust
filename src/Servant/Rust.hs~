{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE UndecidableInstances #-}

#include "overlapping-compat.h"

module Servant.Rust
  ( rustForAPI
  ) where

import Control.Lens
import Data.Aeson
import Data.Monoid
import Data.Proxy
import Data.Text
import Servant.Foreign


data Rust

instance HasForeignType Rust Int where
  -- FIXME: should probably depend on arch
  typeFor _ _ = "i32"

instance HasForeignType Rust Bool where
  typeFor _ _ = "std::bool"

instance {-# OVERLAPPING #-} HasForeignType Rust [Char] where
  typeFor _ _ = "std::string"

instance HasForeignType Rust Text where
  typeFor _ _ = "std::string"

-- instances can overlap because of dreaded strings
instance {-# OVERLAPPABLE #-} (FromJSON t, ToJSON t, HasForeignType Rust t)
  =>  HasForeignType Rust [t] where
    typeFor rust layout = "Vec<" <> typeFor rust layout <> ">"

foreignInfo
  :: HasForeign Rust layout
  => Proxy layout
  -> Foreign layout
foreignInfo proxy = foreignFor (Proxy :: Proxy Rust) proxy defReq

ncat :: [Text] -> Text
ncat = foldMap (<> "\n")

rustForAPI
  :: (HasForeign Rust api, GenerateList (Foreign api))
  => Proxy api
  -> Text
rustForAPI proxy = ncat $
  [ "extern crate hyper;"
  , "use std::io::Read;"
  , "use hyper::Client;"
  , "use hyper::header::Connection;"
  , clientFunctions proxy ]

clientFunctions
  :: (HasForeign Rust api)
  => Proxy api
  -> Text
clientFunctions proxy = undefined
